#!/usr/bin/env bash
#
# Backup the Home Assistant database from Postgresql
#
# Copyright 2022, Joe Block <jpb@unixorn.net>

set -o pipefail
if [[ -n "$DEBUG" ]]; then
  set -x
fi

function debug() {
  if [[ -n "$DEBUG" ]]; then
    echo "$@"
  fi
}

function fail() {
  printf '%s\n' "$1" >&2  ## Send message to stderr. Exclude >&2 if you don't want it that way.
  exit "${2-1}"  ## Return a code specified by $2 or 1 by default.
}

function has() {
  # Check if a command is in $PATH
  which "$@" > /dev/null 2>&1
}

# on_exit and add_on_exit from http://www.linuxjournal.com/content/use-bash-trap-statement-cleanup-temporary-files

# Usage:
#   add_on_exit rm -f /tmp/foo
#   add_on_exit echo "I am exiting"
#   tempfile=$(mktemp)
#   add_on_exit rm -f "$tempfile"

function on_exit()
{
  for i in "${on_exit_items[@]}"
  do
    eval $i
  done
}

function add_on_exit()
{
  local n=${#on_exit_items[*]}
  on_exit_items[$n]="$*"
  if [[ $n -eq 0 ]]; then
    trap on_exit EXIT
  fi
}


# Set up a working scratch directory
SCRATCH_D=$(mktemp -d)

if [[ ! "$SCRATCH_D" || ! -d "$SCRATCH_D" ]]; then
  echo "Could not create temp dir"
  exit 1
fi

add_on_exit rm -rf "$SCRATCH_D"

if ! has docker; then
  fail "Can't find docker in your PATH - this depends on docker"
fi

function determine-compressor() {
  if has gzip; then
    COMPRESSOR=gzip
    COMPRESSION_ARGS="-9v"
    EXTENSION='gz'
    debug "Found gzip"
  fi
  if has pigz; then
    COMPRESSOR=pigz
    COMPRESSION_ARGS="-9v --time"
    EXTENSION='gz'
    debug "Found pigz"
  fi
  if has bzip2; then
    COMPRESSOR=bzip2
    COMPRESSION_ARGS="-9v"
    EXTENSION='bz2'
    debug "Found bzip2"
  fi
  if has pbzip2; then
    COMPRESSOR=pbzip2
    COMPRESSION_ARGS="-9v"
    EXTENSION='bz2'
    debug "Found pbzip2"
  fi
  debug "Will compress with ${COMPRESSOR} ${COMPRESSION_ARGS}..."
}

function get-settings() {
  POSTGRESQL_IMAGE=${POSTGRESQL_IMAGE:-'postgres:14.5'}
  PG_SERVER=${PG_SERVER:-godzilla.unixorn.net}
  PG_USERNAME=${PG_USERNAME:-homeassistant}
  PG_PASSWORD=${PG_PASSWORD:-SpeakFriendAndEnter}
  HASS_DB=${HASS_DB:-homeassistant_db}
}

get-settings
determine-compressor

STAMP=$(date +%Y-%m-%d-%H%M.%S)

docker run --rm "$POSTGRESQL_IMAGE" \
  pg_dump --host="$PG_SERVER" \
  --dbname="postgresql://${PG_USERNAME}:${PG_PASSWORD}@${PG_SERVER}/${HASS_DB}" \
  | ${COMPRESSOR} ${COMPRESSION_ARGS} > ha-database-${STAMP}.sql.${EXTENSION}
exit $?